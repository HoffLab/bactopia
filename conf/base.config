process {
    // Defaults
    cpus = {check_max(1, params.max_cpus, 'cpus' )}
    memory = {check_max(1.GB * task.attempt, params.max_memory, 'memory' )}
    time = {check_max( (params.min_time).m * task.attempt, (params.max_time).m, 'time' )}
    errorStrategy = 'retry'
    maxRetries = params.max_retry

    // Full cpus
    withLabel: max_cpus {
        cpus = {check_max('request', RESOURCES.MAX_CPUS, 'cpus')}
    }

    // Half cpus
    withLabel: max_cpu_75 {
        cpus = {check_max('request', RESOURCES.MAX_CPUS_75, 'cpus' )}
    }

    // Half cpus
    withLabel: max_cpu_50 {
        cpus = {check_max('request', RESOURCES.MAX_CPUS_50, 'cpus' )}
    }

    withLabel: ariba_analysis {
        cpus = {task.attempt > 1 ? 1 : check_max('request', RESOURCES.MAX_CPUS_75, 'cpus')}
        maxRetries = 1
        memory = {check_max(2.GB * task.attempt, RESOURCES.MAX_MEMORY, 'memory' )}
        errorStrategy = { task.attempt > 1 && task.exitStatus == 1 ? 'ignore' : 'retry' }
    }

    withLabel: qc_reads {
        memory = {check_max(((params.qc_ram).GB * task.attempt), RESOURCES.MAX_MEMORY, 'memory')}
    }

    withLabel: 'assemble_genome|assembly_qc' {
        memory = { sample_type == 'hybrid' || params.use_unicycler ? check_max(((params.unicycler_ram).GB * task.attempt), RESOURCES.MAX_MEMORY, 'memory') : check_max(((params.shovill_ram).GB * task.attempt), RESOURCES.MAX_MEMORY, 'memory')}
        time = { sample_type == 'hybrid' ||  params.use_unicycler ? check_max( (Math.max(params.min_time, 120)).m * task.attempt, (params.max_time).m, 'time' ) : check_max( (params.min_time).m * task.attempt, (params.max_time).m, 'time' )}
    }

    withLabel: call_variants {
        memory = {check_max(((params.snippy_ram).GB * task.attempt), RESOURCES.MAX_MEMORY, 'memory')}
    }

    withLabel: count_31mers {
        memory = {check_max(((params.cortex_ram).GB * task.attempt), RESOURCES.MAX_MEMORY, 'memory')}
    }

    withLabel: minmer_query {
        memory = {check_max(((params.minmer_ram).GB * task.attempt), RESOURCES.MAX_MEMORY, 'memory')}
    }

    withLabel: download_references {
        maxRetries = Math.max(params.max_retry, 6)
        errorStrategy = { task.attempt > 5 && task.exitStatus == 75 ? 'ignore' : 'retry' }
    }

    withLabel: 'gather_samples' {
        maxForks = params.max_downloads
        maxRetries = 20
    }

    // Modules imported from nf-core
    withLabel: process_low {
        cpus = {check_max('request', RESOURCES.MAX_CPUS, 'cpus')}
        memory = {check_max(8.GB * task.attempt, params.max_memory, 'memory' )}
        time = {check_max( 2.h * task.attempt, (params.max_time).m, 'time' )}
    }
    withLabel: process_medium {
        cpus = {check_max('request', RESOURCES.MAX_CPUS, 'cpus')}
        memory = {check_max(16.GB * task.attempt, params.max_memory, 'memory' )}
        time = {check_max( 12.h * task.attempt, (params.max_time).m, 'time' )}
    }
    withLabel: process_high {
        cpus = {check_max('request', RESOURCES.MAX_CPUS, 'cpus')}
        memory = {check_max(64.GB * task.attempt, params.max_memory, 'memory' )}
        time = {check_max( 24.h * task.attempt, (params.max_time).m, 'time' )}
    }
    withLabel: process_long {
        time = {check_max( 96.h * task.attempt, (params.max_time).m, 'time' )}
    }
    withLabel: process_high_memory {
        memory = {check_max(128.GB * task.attempt, params.max_memory, 'memory' )}
    }
    withLabel: error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel: error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}
